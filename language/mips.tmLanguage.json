{
	"name": "Mips",
	"scopeName": "source.mips",
	"fileTypes": [
		"dmips",
		"mips"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#number"
		},
		{
			"include": "#punctuation"
		},
		{
			"name": "string.quoted.double.mips",
			"begin": "\"",
			"patterns": [
				{
					"match": ".",
					"name": "string.ssraw"
				}
			],
			"end": "\"",
			"comment": "Strings"
		},
		{
			"name": "string.quoted.single.mips",
			"begin": "'",
			"patterns": [
				{
					"match": ".",
					"name": "string.ssraw"
				}
			],
			"end": "'",
			"comment": "Characters"
		},
		{
			"name": "entity.name.tag.mips",
			"match": "\\b[\\w]+\\b:",
			"comment": "Labels"
		},
		{
			"name": "storage.type.mips",
			"match": "\\.\\b(align|ascii|asciiz|byte|extern|globl|space|word|half)\\b",
			"comment": "Assembler directives for data storage"
		},
		{
			"name": "keyword.control.mips",
			"match": "\\.(data|text|kdata|ktext|eqv|macro|end_macro|include)",
			"comment": "Segments"
		},
		{
			"name": "variable.parameter.mips",
			"match": "\\$(((3[01])|([12]?[0-9])|[0-9])|zero|at|v[01]|a[0-3]|s[0-7]|t[0-9]|k[01]|gp|sp|fp|ra)",
			"comment": "Registers by id"
		},
		{
			"name": "support.function.source.mips",
			"match": "\\b(add|addi|addiu|addu|and|andi|b|beq|beqz|bge|bgez|bgezal|bgt|bgtz|blez|blt|bltz|bltzal|bne|bnez|clo|clz|div|divu|j|jal|jalr|jr|la|lb|lbu|lh|lhu|li|lui|lw|lwl|lwr|madd|maddu|mfhi|mflo|move|movn|movz|msub|msubu|mthi|mtlo|mul|mult|multu|neg|nop|nor|or|ori|sb|sh|sll|sllv|slt|slti|sltiu|sltu|sra|srav|srl|srlv|sub|subu|sw|swl|swr|syscall|xor|xori)\\b",
			"comment": "Instructions provided by the MIPS assembly language"
		},
		{
			"name": "variable.language.mips",
			"match": "%\\w+",
			"comment": "Macro arguments"
		},
		{
			"name": "entity.name.function.mips",
			"match": "\\b(syscall|nop)\\b",
			"comment": "Special Instructions"
		}
	],
	"repository": {
		"codetags": {
			"match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
			"captures": {
				"1": {
					"name": "keyword.codetag.notation.mips"
				}
			}
		},
		"comments": {
			"name": "comment.line.number-sign.mips",
			"begin": "(\\#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.mips"
				}
			},
			"end": "($)",
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.separator.colon.mips",
					"match": ":"
				},
				{
					"name": "punctuation.separator.element.mips",
					"match": ","
				}
			]
		},
		"number": {
			"name": "constant.numeric.mips",
			"patterns": [
				{
					"include": "#number-dec"
				},
				{
					"include": "#number-hex"
				},
				{
					"include": "#number-oct"
				},
				{
					"include": "#number-bin"
				},
				{
					"name": "invalid.illegal.name.mips",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"number-dec": {
			"name": "constant.numeric.dec.mips",
			"match": "\\b(?:(?:\\+|-)?)(?:(?:[1-9](?:_?[0-9])*)|(?:0(?:_?0)*))\\b",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.mips"
				},
				"2": {
					"name": "invalid.illegal.dec.mips"
				},
				"3": {
					"name": "invalid.illegal.dec.mips"
				}
			}
		},
		"number-hex": {
			"name": "constant.numeric.hex.mips",
			"match": "(0[xX])(_?[0-9a-fA-F])+\\b",
			"captures": {
				"1": {
					"name": "storage.type.number.mips"
				}
			}
		},
		"number-oct": {
			"name": "constant.numeric.oct.mips",
			"match": "\b(?:0(?:o|O)(?:_?[0-7])+)\b",
			"captures": {
				"1": {
					"name": "storage.type.number.mips"
				}
			}
		},
		"number-bin": {
			"name": "constant.numeric.bin.mips",
			"match": "\\b(?:0(?:b|B)(?:_?[0-1])+)\\b",
			"captures": {
				"1": {
					"name": "storage.type.number.mips"
				}
			}
		}
	}
}
